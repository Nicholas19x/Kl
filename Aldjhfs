local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Title of the library", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local AutofarmSettingTab = Window:MakeTab({
    Name = "Setting",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local TeleportTab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local AutofarmTab = Window:MakeTab({
    Name = "Auto farm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local melee = game:GetService("Players").LocalPlayer.PlayerStats.FightingStyle.Value
local sword = game:GetService("Players").LocalPlayer.PlayerStats.SwordName.Value

spawn(function()
    while task.wait(0.2) do
        pcall(function()
            if _G.Auto_Farm then
                -- ใช้ Fighting Style Action ก่อน
                local args = {
                    [1] = "FS_" .. melee .. "_M1"
                }
                game:GetService("ReplicatedStorage").Chest.Remotes.Functions.SkillAction:InvokeServer(unpack(args))
            end
        end)
    end
end)

spawn(function()
    while task.wait(0.2) do
        pcall(function()
            if _G.Auto_Farm then
                -- ใช้ Sword Action แยกออกมา
                local args = {
                    [1] = "FS_" .. sword .. "_M1"
                }
                game:GetService("ReplicatedStorage").Chest.Remotes.Functions.SkillAction:InvokeServer(unpack(args))
            end
        end)
    end
end)

AutofarmSettingTab:AddTextbox({
    Name = "Distance",
    Default = "2.5",
    TextDisappear = true,
    Callback = function(Value)
        Distancehigh = tonumber(Value)
    end    
})

function checklevel()
    local lv = game:GetService("Players").LocalPlayer.PlayerStats.lvl.Value
    if lv == 1 or lv <= 2000 then
        Mon = "Soldier [Lv. 1]"
        QuestName = "Kill 4 Soldiers"
    end
end

local function teleportToTarget(position)
    local player = game.Players.LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    if hrp then
        print("Teleporting to:", position)  -- Debugging teleport position
        hrp.CFrame = position
    else
        print("HumanoidRootPart not found.")
    end
end

local function findNewTarget()
    for _, v in pairs(game:GetService("Workspace").Monster.Mon:GetChildren()) do
        if v.Name == Mon and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
            print("Found target:", v.Name)  -- Debugging target identification
            return v
        end
    end
    print("No target found.")  -- Debugging when no target is found
    return nil
end

local function setPlayerToLyingPosition()
    local player = game.Players.LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")

    if hrp and humanoid then
        humanoid.PlatformStand = true

        hrp.CFrame = hrp.CFrame * CFrame.Angles(math.rad(-90), 0, 0)

        local existingGyro = hrp:FindFirstChild("BodyGyro")
        if existingGyro then existingGyro:Destroy() end

        local existingPosition = hrp:FindFirstChild("BodyPosition")
        if existingPosition then existingPosition:Destroy() end

        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.Parent = hrp
        bodyGyro.CFrame = hrp.CFrame
        bodyGyro.MaxTorque = Vector3.new(4000, 4000, 4000)
        bodyGyro.P = 10000
        bodyGyro.D = 1000

        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Parent = hrp
        bodyPosition.Position = hrp.Position
        bodyPosition.MaxForce = Vector3.new(4000, 4000, 4000)
        bodyPosition.P = 10000
        bodyPosition.D = 1000
    end
end

spawn(function()
    while task.wait(0.1) do
        pcall(function()
            if _G.Auto_Farm then
                checklevel()
                if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.QuestBoard.Visible == false then
                    if QuestName and QuestName ~= "" then
                        local args = {
                            [1] = "take",
                            [2] = QuestName
                        }
                        game:GetService("ReplicatedStorage").Chest.Remotes.Functions.Quest:InvokeServer(unpack(args))
                    end
                end
            end
        end)
    end
end)

spawn(function()
    local currentTarget = nil
    while task.wait(0.1) do
        if _G.Auto_Farm then
            if game:GetService("Players").LocalPlayer.PlayerGui.MainGui.QuestBoard.Visible == true then
                if not currentTarget or (currentTarget:FindFirstChild("Humanoid") and currentTarget.Humanoid.Health <= 0) then
                    currentTarget = findNewTarget()
                end

                if currentTarget and currentTarget:FindFirstChild("Humanoid") and currentTarget.Humanoid.Health > 0 then
                    local heightAboveHead = currentTarget.HumanoidRootPart.Size.Y * (Distancehigh or 2.5)
                    print("Moving to target with distance:", heightAboveHead)  -- Debugging distance
                    local targetPosition = currentTarget.HumanoidRootPart.CFrame * CFrame.new(0, heightAboveHead, 0)
                    teleportToTarget(targetPosition)

                    setPlayerToLyingPosition()
                end
            end
        end
    end
end)

AutofarmTab:AddToggle({
    Name = "Auto farm",
    Default = false,
    Callback = function(Value)
        _G.Auto_Farm = Value

        local player = game.Players.LocalPlayer
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

        if not _G.Auto_Farm then
            if hrp then
                local existingGyro = hrp:FindFirstChild("BodyGyro")
                if existingGyro then existingGyro:Destroy() end

                local existingPosition = hrp:FindFirstChild("BodyPosition")
                if existingPosition then existingPosition:Destroy() end

                local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end
    end    
})

-- รับตำแหน่งที่ต้องการให้เทเลพอร์ต
local teleportPositions = {
    StarterIsland = Vector3.new(-2091, 100, -4615),
    SoilderIsland = Vector3.new(100, 50, -3000)
}

-- ฟังก์ชันสำหรับการเทเลพอร์ตตัวละคร
local function teleportToPosition(islandName)
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    
    -- ตรวจสอบว่าเกาะมีอยู่ในตารางหรือไม่
    local position = teleportPositions[islandName]
    if position then
        -- ถ้าพบตำแหน่งเกาะ ก็เทเลพอร์ตไปยังพิกัดนั้น
        humanoidRootPart.CFrame = CFrame.new(position)
        print("Teleported to " .. islandName)
    else
        -- ถ้าไม่พบตำแหน่งเกาะ ก็แจ้งเตือน
        warn("Island not found: " .. islandName)
    end
end

-- ฟังก์ชันตรวจสอบว่ามีเกาะใน Workspace.Areas ตรงกับตารางหรือไม่
local function createButtonsForIslands()
    local areas = game:GetService("Workspace").Areas:GetChildren()
    
    for _, area in pairs(areas) do
        local islandName = area.Name
        if teleportPositions[islandName] then
            TeleportTab:AddButton({
                Name = "Go to " .. islandName,
                Callback = function()
                    -- เมื่อกดปุ่ม จะเทเลพอร์ตไปยังเกาะที่ต้องการ
                    teleportToPosition(islandName)
                end
            })
        end
    end
end

-- สร้างปุ่มตามไฟล์ที่พบใน Workspace.Areas
createButtonsForIslands()
